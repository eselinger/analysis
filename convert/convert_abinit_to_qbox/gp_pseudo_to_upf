#! /usr/bin/perl -w

# gp_pseudo_to_upf converts a GP pseudopotential (usually generated by
# ps_trans) to PWSCF UPF format

if ($#ARGV < 0) {
  print "syntax:  gp_pseudo_to_upf [GP pseudopotential file(s)]\n";
  exit;
}

$lmax = 3;

$gp2upf = "gp2upf";
while (! -e $gp2upf) {
  print "Please enter name of gp2upf executable: ";
  $gp2upf = <STDIN>;  chomp $gp2upf;
}

foreach $gpfile (@ARGV[0..$#ARGV]) {  

  @filesplit = split '_',$gpfile;
  # assume naming scheme from ps_trans, e.g. TM_CAPW91_Au, TM_PBEGGA_Si
  if ($filesplit[0] ne 'TM') {
    print "GP pseudopotential has unfamiliar naming scheme:  $gpfile\n";
    exit;
  }
  $xc = $filesplit[1];
  if ($xc ne "CAPW91" && $xc ne "PBEGGA" ) {
    print "GP pseudopotential has unexpected xc name:  $xc\n";
    exit;
  }

  $symbol = $filesplit[2];

  # assume user copied over $symbol.ini files
  $inifile = join '',$symbol,'.ini';
  while (! -e $inifile) { 
    print "Looking for $inifile...not found.\n  Enter name of .ini file for $gpfile:  ";
    $inifile = <STDIN>;  chomp $inifile;
  }

  # open ini file and read occupation
  open INI, $inifile;
  @data = split ' ',<INI>;  #first line
#  $z = $data[0];
  $nc = $data[1]; # number of core levels, e.g. 1s,2s = 2
  $nv = $data[2]; # number of valence levels, e.g. 2p,3s,3p,3d = 4
  for ($i=0; $i<$nc; $i++) {
    @data = split ' ',<INI>;
#    $coren[$i] = $data[0];
#    $corel[$i] = $data[1];
#    $coreocc[$i] = $data[2];
    $maxn[$data[1]] = $data[0];
    $maxocc[$data[1]] = $data[2];
  }
  for ($i=0; $i<$nv; $i++) {
    @data = split ' ',<INI>;
#    $valn[$i] = $data[0];
#    $vall[$i] = $data[1];
#    $valocc[$i] = $data[2];
    $maxn[$data[1]] = $data[0];
    $maxocc[$data[1]] = $data[2];
  }
  close INI;

#  for ($l=0; $l<=$#maxn; $l++) {
#    print "l=$l, maxn = $maxn[$l], maxocc=$maxocc[$l]\n";
#  }



  $tmpfile = join '',$symbol,$xc,'.tmptmp4';
  open TMP, ">$tmpfile";
  print TMP "$gpfile\n";
  print TMP "$symbol\n";
  if ($xc eq "CAPW91") {
    print TMP "SLA PZ NOGX NOGC\n";
  }
  elsif ($xc eq "PBEGGA") {
    print TMP "SLA PW PBE PBE\n";
  }
  else {
    close TMP;
    unlink $tmpfile;
    exit;
  }
  $lname[0] = "s";
  $lname[1] = "p";
  $lname[2] = "d";
  $lname[3] = "f";
  for ($l=0; $l<=$#maxn; $l++) {
    print TMP "$maxn[$l]$lname[$l], $maxocc[$l]\n";
  }
  for ($l=$#maxn+1; $l<=$lmax; $l++) {
    if ($l==1) {
      print TMP "2p, 0\n";
    }
    elsif ($l==2) {
      print TMP "3d, 0\n";
    }
    elsif ($l==3) {
      print TMP "4f, 0\n";
    }
  }
  close TMP;

  system("$gp2upf < $tmpfile");
  unlink $tmpfile;
}
