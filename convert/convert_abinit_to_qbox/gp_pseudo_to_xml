#! /usr/bin/perl

# gp_pseudo_to_xml converts a GP pseudopotential to Qbox xml format 

if ($#ARGV < 0) {
  print "syntax:  gp_pseudo_to_xml [GP pseudopotential file(s)]\n";
  exit;
}

foreach $file (@ARGV[0..$#ARGV]) {  

  open DATA, $file;
  $xmlfile = join '',$file,'.xml';
  open XML, ">$xmlfile";

  print XML "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
  print XML "<qbox:species xmlns:qbox=\"http://www.llnl.gov/casc/fpmd/qbox/ns/qbox-1.0\"\n"; 
  print XML "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"; 
  print XML "xsi:schemaLocation=\"http://www.llnl.gov/casc/fpmd/qbox/ns/qbox-1.0\n"; 
  print XML "species.xsd\">\n";
  print XML "<description>\n";
  print XML "$file\n";
  print XML "</description>\n";
  print XML "<symbol>$file</symbol>\n";

  $firstline = -1;
  LINE: while ($line=<DATA>) {
    if ($line =~ /\#/) { next LINE; }  # ignore comment lines
        
    @data = split ' ',$line;
    $npts = $data[0];
    if ($firstline == -1) {
      if ($#data < 8) {
        print "Error reading GP header.\n";
        exit;
      }
      $valencecharge = $data[1];
      $mass = $data[3];
      $lmax = $data[4]-1;
      $lloc = $lmax;
      $nquad = 0.0;
      $rquad = 0.0;
      if ($#data > 8) {
        $lloc = $data[9];
        if ($data[10] > 1) {
          $nquad = $data[10];
        }
      }
      # estimate mass from atomic number -- this is almost always wrong
      #$tmp = $mass/2;
      #$atnum = int $tmp;
      $atnum = 0;
      print "Using atomic number = $atnum, atomic mass = $mass\nNote:  if these are incorrect, you'll need to manually edit the .xml file\n";

      print XML "<atomic_number>$atnum</atomic_number>\n";
      print XML "<mass>$mass</mass>\n";
      print XML "<norm_conserving_pseudopotential>\n";
      print XML "<valence_charge>$valencecharge</valence_charge>\n";
      print XML "<lmax>$lmax</lmax>\n";
      print XML "<llocal>$lloc</llocal>\n";
      print XML "<nquad>$nquad</nquad>\n";
      print XML "<rquad>$rquad</rquad>\n";

      $firstline = 1;
    }

    for ($l=0;$l<=$lmax;$l++) {

      if ($l>0) {
        $line2 = <DATA>;
        @data2 = split ' ',$line2;
        if ($#data2 != 0 || $data2[0] != $npts) {
          print "Error reading GP potential\n";
          exit;
        }
      }

      $cnt = 0;
      for ($i=0;$i<$npts;$i++) {
        $line2 = <DATA>;
        @data2 = split ' ',$line2;
        $r[$cnt] = $data2[0];
        $pot[$cnt] = $data2[1];
        $cnt++;
      }
      $line2 = <DATA>;
      @data2 = split ' ',$line2;
      if ($#data2 != 0 || $data2[0] != $npts) {
        print "Error reading GP potential\n";
        exit;
      }
      $cnt = 0;
      for ($i=0;$i<$npts;$i++) {
        $line2 = <DATA>;
        @data2 = split ' ',$line2;
        $radfun[$cnt] = $data2[1];
        $cnt++;
      }

      if ($l == 0) {
        $deltar = $r[1]-$r[0];
        print XML "<mesh_spacing>$deltar</mesh_spacing>\n";
      }
      print XML "<projector l=\"$l\" size=\"$npts\">\n";
      print XML "<radial_potential>\n";
      for ($i=0;$i<$npts;$i++) {
        print XML "$pot[$i]\n";
      }
      print XML "</radial_potential>\n";
      print XML "<radial_function>\n";
      for ($i=0;$i<$npts;$i++) {
        print XML "$radfun[$i]\n";
      }
      print XML "</radial_function>\n";
      print XML "</projector>\n";
    }
    print XML "</norm_conserving_pseudopotential>\n";
    print XML "</qbox:species>\n";
    last LINE;

  }

  close DATA;
  close XML;

}
