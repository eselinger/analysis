
Vasputil release 4.2

Vasputil is a set of command-line utilities and python libraries designed to
make life with VASP easier. It provides a set of commands to manipulate POSCAR
files.

Available commands via the 'vasputil' binary are:
poscar2xyz: Convert a POSCAR file to a xyz format file.
plane2atom: Calculate the average distance from a plane to a set of atoms.
plane2layer: Calculate the average distance from a plane to a layer.
atomsdistance: Calculate the distance between two atoms.
atomsmoved: Check which atoms have moved from one POSCAR to another.
interpolate: Interpolate the coordinates between two POSCAR files.
normalize: Normalize the coordinates in a POSCAR file.
unnormalize: Unnormalize coordinates in a POSCAR file.
centercell: Center a cell around a point.
removeatoms: Remove atoms from a POSCAR file.
kspace2xyz: Convert a POSCAR file to a xyz file with reciprocal coordinates.
check_nndist: Check nearest neighbor distances.
scgenerator: Generate a supercell.
lockatoms: Lock atom coordinates in a supercell.
xyz2poscar: Convert a XYZ file to a POSCAR file.
dumpcoords: Dump cartesian coordinates to stdout.
importcoords: Read cartesian coordinates from stdin.
dumpatomsase: Dump atom types and coordinates suitable for importing to Campos ASE.
test: Run self-tests.

Documentation for each utility is available by running it without any
arguments, e.g. "vasputil poscar2xyz".

In addition to the above, vasputil contains some Python scripts, which can be
used directly or as examples of what can be done with the provided python
modules.  These are 

vasputil_dosplot: plot density-of-states. 

vasputil_interpolate: wrapper around "vasputil interpolate" for creating many
evenly spaced images at once.

vasputil_zlayers: Find layers in z direction and print interlayer distances.

Vasputil is written mostly the Fortran 95 programming language with a few
optional Fortran 2003 features such as command line argument handling, and
should be compilable by any compiler that conforms to said standard.  Vasputil
uses the common GNU autotools based build system, and has been tested with IBM
xlf95, Lahey lf95, Pathscale pathf90, Intel ifort, GNU Fortran (Gfortran), and
Portland pgf90. Parts of vasputil are also written in Python, see below for
requirements.

Vasputil depends on the LAPACK and BLAS libraries. The provided autotools build
system tries to use different platform-specific optimized versions of the BLAS
library; ESSL on IBM, the BLAS that is provided with the Lahey compiler, and
the Portland and Pathscale Makefiles use the AMD ACML library.

To regenerate the source code documentation (file doc/vasputil.html),
the robodoc utility is needed. To regenerate the dependency list, the
makedepf90 utility is needed.


QUICK INSTALLATION INSTRUCTIONS

1) Unpack the source code.

$ tar xvzf vasputil-$(VERSION).tar.gz

2) Run configure, if necessary with extra flags to specify location of
libraries not in the default search path, if you want to use some specific
compiler etc.

Eg. to use dynamically linked ACML:

$ ./configure LDFLAGS=-L/opt/acml/pathscale64/lib/

Statically linked ACML

$ ./configure --with-blas=/opt/acml/pathscale64/lib/libacml.a

Use Intel Fortran

$ ./configure FC=ifort

Install somewhere not in the default location ($HOME)

$ ./configure --prefix=/usr/local

For help, see

$ ./configure --help

3) Compile and install.

$ make && make install


PYTHON SCRIPTS

To use the python scripts you should add the python library directory to the
PYTHONPATH environment variable. E.g. if you ran configure with the prefix
$HOME (default), then you should have something like 

export PYTHONPATH=$HOME/lib/pythonX.Y/site-packages

where X.Y is your python version, in your shell initialization file (e.g.
~/.bash_profile). On the other hand, if you installed into the sytem default
location, you probably don't need to do anything. 

Also, some of the python scripts and the library modules use the matplotlib
library, which you can find at http://matplotlib.sf.net, in case your system
doesn't already have it.  As matplotlib requires some other libraries (e.g.
NumPy), and if you don't have access to a package management system (e.g. on
Linux) which includes matplotlib and its dependencies, you can get all at once
by installing one of the python distributions targeted at science, such as
SAGE, Enthought Python Distribution, or Python(x,y). Another solution if you
already have python installed, is to install matplotlib and other libraries via
easy_install from setuptools (a sort of package management system for python
packages).


INTERACTIVE USAGE

The python modules are designed to be used from the interactive python prompt
as well, to provide a sort of MATLAB-like interactive environment where you can
manipulate coordinates stored in arrays, or plot data etc. For this, the
'ipython' enhanced interactive environment is recommended. Start with the
matplotlib stuff preloaded with 'ipython -pylab'. For those familiar with
MATLAB, see http://www.scipy.org/NumPy_for_Matlab_Users . After that, just
import what you need from the vasputil module and get going! See the python
scripts for reference, or 'pydoc vasputil', 'pydoc vasputil.supercell' etc. to
read documentation, or the ? operator in ipython.
